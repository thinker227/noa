// <auto-generated/>

namespace Noa.Compiler.Nodes.Generated;

{{~ for node in nodes ~}}
public {{ if node.is_abstract }}abstract {{ else if node.children.size == 0 }}sealed {{ end }}partial class {{ node.name }} : {{ node.parent.name }}{{ if node.is_abstract }};
{{ else }}
{
    {{~ for member in node.members ~}}
    public required {{ if member.is_list }}ImmutableArray<{{ member.type }}>{{ else }}{{ member.type }}{{ if member.is_optional }}?{{ end }}{{ end }} {{ member.name }} { get; init; }
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
    {{~ if !node.is_abstract ~}}
    {{~ if node.members.size > 0 ~}}

    {{~ end ~}}
    public override IEnumerable<{{ root_node.name }}> Children => [
    {{- for member in node.non_primitive_members -}}
        {{- if member.is_list }}..{{ member.name }}{{ else if member.is_optional }}..EmptyIfNull({{ member.name }}){{ else }}{{ member.name }}{{ end -}}
        {{- if !for.last }}, {{ end -}}
    {{- end -}}
    ];
    {{~ end ~}}
}
{{~ end ~}}
{{~ if !for.last ~}}

{{~ end ~}}
{{~ end ~}}
