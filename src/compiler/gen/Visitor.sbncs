// <auto-generated/>

namespace Noa.Compiler.Nodes;

public abstract partial class Visitor
{
    public virtual void Visit({{ root_node.name }} node)
    {
        if (!Filter(node)) return;

        BeforeVisit(node);

        switch (node)
        {
        {{~ for child in root_node.children ~}}
        case {{ child.name }} x:
            Visit{{ child.name }}(x);
            break;
        {{~ end ~}}
        default:
            throw new UnreachableException();
        }

        AfterVisit(node);
    }

    {{~ for node in nodes ~}}
    protected virtual void Visit{{ node.name }}({{ node.name }} node)
    {{- if node.is_abstract }}
    {
        switch (node)
        {
        {{~ for child in node.terminal_descendants ~}}
        case {{ child.name }} x:
            Visit{{ child.name }}(x);
            break;
        {{~ end ~}}
        default:
            throw new UnreachableException();
        }
    }
    {{~ else if node.non_primitive_members.size == 0 }} {}
    {{~ else }}
    {
        {{~ for member in node.non_primitive_members ~}}
        Visit(node.{{ member.name }});
        {{~ end ~}}
    }
    {{~ end ~}}
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
}
