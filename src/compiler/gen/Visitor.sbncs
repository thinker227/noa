// <auto-generated/>

using System.Diagnostics;

namespace Noa.Compiler.Nodes.Generated;

public abstract partial class Visitor<T>
{
    {{~ for node in nodes ~}}
    public virtual T Visit{{ node.name }}({{ node.name }} node)
    {{- if node.is_abstract }} => node switch
    {
        {{~ for child in node.children ~}}
        {{ child.name }} x => Visit{{ child.name }}(x),
        {{~ end ~}}
        _ => throw new UnreachableException()
    }
    {{~ else if !node.has_non_primitive_members }} => GetDefault(node);
    {{~ else }}
    {
        {{~ for member in node.non_primitive_members ~}}
        Visit(node.{{ member.name }});
        {{~ end ~}}

        return GetDefault(node);
    }
    {{~ end ~}}
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
}

public abstract partial class Visitor
{
    {{~ for node in nodes ~}}
    public virtual T Visit{{ node.name }}({{ node.name }} node)
    {{- if node.is_abstract }}
    {
        switch (node)
        {
        {{~ for child in node.children ~}}
        case {{ child.name }} x:
            Visit{{ child.name }}(x);
            break;
        {{~ end ~}}
        }
    }
    {{~ else if !node.has_non_primitive_members }} {}
    {{~ else }}
    {
        {{~ for member in node.non_primitive_members ~}}
        Visit(node.{{ member.name }});
        {{~ end ~}}
    }
    {{~ end ~}}
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
}
