// <auto-generated/>

#nullable enable

using System.Diagnostics;

namespace Noa.Compiler.Nodes;

public abstract partial class Visitor<T>
{
    private T CoreVisit({{ root_node.name }} node) => node switch
    {
        {{~ for child in root_node.children ~}}
        {{ child.name }} x => Visit{{ child.name }}(x),
        {{~ end ~}}
        _ => throw new UnreachableException()
    };

    {{~ for node in nodes ~}}
    protected virtual T Visit{{ node.name }}({{ node.name }} node)
    {{- if node.is_abstract }} => node switch
    {
        {{~ for child in node.terminal_descendants ~}}
        {{ child.name }} x => Visit{{ child.name }}(x),
        {{~ end ~}}
        _ => throw new UnreachableException()
    };
    {{~ else if node.non_primitive_members.size == 0 }} => GetDefault(node);
    {{~ else }}
    {
        {{~ for member in node.non_primitive_members ~}}
        Visit(node.{{ member.name }});
        {{~ end ~}}

        return GetDefault(node);
    }
    {{~ end ~}}
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
}
