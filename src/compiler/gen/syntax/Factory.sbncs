{{- func type -}}
    {{- if $1 -}}
        Green.
    {{- end -}}
    {{- if $0.list_kind == "Simple" -}}
        SyntaxList<{{ if $1 }}Green.{{ end }}{{ $0.type }}>
    {{- else if $0.list_kind == "Separated" -}}
        SeparatedSyntaxList<{{ if $1 }}Green.{{ end }}{{ $0.type }}>
    {{- else -}}
        {{- $0.type -}}
    {{- end -}}
    {{- if $0.is_optional -}}
        ?
    {{- end -}}
{{- end -}}

{{- func param -}}{{ type $0 }} @{{ camel_case $0.name }}{{- end -}}

// <auto-generated/>

#nullable enable

namespace Noa.Compiler.Syntax;

public static partial class SyntaxFactory
{
    {{~ for node in nodes ~}}
    {{~ if !node.is_abstract ~}}
    public static {{ node.name }} {{ node.name | string.remove_last "Syntax" }}({{ for member in node.members }}{{ param member }}{{ if !for.last }}, {{ end }}{{ end }})
    {
        var green = new Green.{{ node.name }}()
        {
            {{~ for member in node.members ~}}
            {{ member.name }} = ({{ type member true }})@{{ camel_case member.name }}{{ if member.is_optional }}?{{ end }}.Green{{ if !for.last }},{{ end }}
            {{~ end ~}}
        };

        return ({{ node.name }})green.ToRed(0, null!);
    }
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
    {{~ end ~}}
}
