// <auto-generated/>

#nullable enable
#pragma warning disable CS0108

namespace Noa.Compiler.Syntax.Green;

{{~ for node in nodes ~}}
internal {{ if node.is_abstract }}abstract {{ else if node.children.size == 0 }}sealed {{ end }}partial class {{ node.name }} : {{ node.parent.name }}
{
    {{~ if !node.is_abstract ~}}
    {{~ for member in node.non_inherited_members ~}}
    public required {{ if member.list_kind == "Simple" }}SyntaxList<{{ member.type }}>{{ else if member.list_kind == "Separated" }}SeparatedSyntaxList<{{ member.type }}>{{ else }}{{ member.type }}{{ end }}{{ if member.is_optional }}?{{ end }} {{ member.name }} { get; init; }
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}

    public override int GetWidth() => {{ for member in node.members }}{{ if !member.is_optional }}{{ member.name }}.GetWidth(){{ else }}{{ member.name }}?.GetWidth() ?? 0{{ end }}{{ if !for.last }} + {{ end }}{{ end }};

    public override Syntax.SyntaxNode ToRed(int position, Syntax.SyntaxNode parent) =>
        new Syntax.{{ node.name }}(this, position, parent);
    {{~ end ~}}
}
{{~ if !for.last ~}}

{{~ end ~}}
{{~ end ~}}
