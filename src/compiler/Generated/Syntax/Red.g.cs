// <auto-generated/>

#nullable enable
#pragma warning disable CS0108

namespace Noa.Compiler.Syntax;

public sealed partial class RootSyntax : SyntaxNode
{
    public SyntaxList<StatementSyntax> Statements => (SyntaxList<StatementSyntax>)((Green.RootSyntax)green).Statements.ToRed<Green.StatementSyntax, StatementSyntax>(position, this);

    public ExpressionSyntax TrailingExpression => (ExpressionSyntax)((Green.RootSyntax)green).TrailingExpression.ToRed(position + ((Green.RootSyntax)green).Statements.GetWidth(), this);
    
    internal RootSyntax(Green.RootSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public abstract partial class StatementSyntax : SyntaxNode
{
    internal StatementSyntax(Green.StatementSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public abstract partial class DeclarationSyntax : StatementSyntax
{
    internal DeclarationSyntax(Green.DeclarationSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class FunctionDeclarationSyntax : DeclarationSyntax
{
    public Token Func => (Token)((Green.FunctionDeclarationSyntax)green).Func.ToRed(position, this);

    public Token Name => (Token)((Green.FunctionDeclarationSyntax)green).Name.ToRed(position + ((Green.FunctionDeclarationSyntax)green).Func.GetWidth(), this);

    public ParameterListSyntax Parameters => (ParameterListSyntax)((Green.FunctionDeclarationSyntax)green).Parameters.ToRed(position + ((Green.FunctionDeclarationSyntax)green).Func.GetWidth() + ((Green.FunctionDeclarationSyntax)green).Name.GetWidth(), this);

    public FunctionBodySyntax Body => (FunctionBodySyntax)((Green.FunctionDeclarationSyntax)green).Body.ToRed(position + ((Green.FunctionDeclarationSyntax)green).Func.GetWidth() + ((Green.FunctionDeclarationSyntax)green).Name.GetWidth() + ((Green.FunctionDeclarationSyntax)green).Parameters.GetWidth(), this);
    
    internal FunctionDeclarationSyntax(Green.FunctionDeclarationSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ParameterListSyntax : SyntaxNode
{
    public Token OpenParen => (Token)((Green.ParameterListSyntax)green).OpenParen.ToRed(position, this);

    public SeparatedSyntaxList<ParameterSyntax> Parameters => (SeparatedSyntaxList<ParameterSyntax>)((Green.ParameterListSyntax)green).Parameters.ToRed<Green.ParameterSyntax, ParameterSyntax>(position + ((Green.ParameterListSyntax)green).OpenParen.GetWidth(), this);

    public Token CloseParen => (Token)((Green.ParameterListSyntax)green).CloseParen.ToRed(position + ((Green.ParameterListSyntax)green).OpenParen.GetWidth() + ((Green.ParameterListSyntax)green).Parameters.GetWidth(), this);
    
    internal ParameterListSyntax(Green.ParameterListSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ParameterSyntax : SyntaxNode
{
    public Token? Mut => (Token?)((Green.ParameterSyntax)green).Mut?.ToRed(position, this);

    public Token Name => (Token)((Green.ParameterSyntax)green).Name.ToRed(position + ((Green.ParameterSyntax)green).Mut?.GetWidth() ?? 0, this);
    
    internal ParameterSyntax(Green.ParameterSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public abstract partial class FunctionBodySyntax : SyntaxNode
{
    internal FunctionBodySyntax(Green.FunctionBodySyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class BlockBodySyntax : FunctionBodySyntax
{
    public BlockExpressionSyntax Block => (BlockExpressionSyntax)((Green.BlockBodySyntax)green).Block.ToRed(position, this);
    
    internal BlockBodySyntax(Green.BlockBodySyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ExpressionBodySyntax : FunctionBodySyntax
{
    public Token Arrow => (Token)((Green.ExpressionBodySyntax)green).Arrow.ToRed(position, this);

    public ExpressionSyntax Expression => (ExpressionSyntax)((Green.ExpressionBodySyntax)green).Expression.ToRed(position + ((Green.ExpressionBodySyntax)green).Arrow.GetWidth(), this);

    public Token Semicolon => (Token)((Green.ExpressionBodySyntax)green).Semicolon.ToRed(position + ((Green.ExpressionBodySyntax)green).Arrow.GetWidth() + ((Green.ExpressionBodySyntax)green).Expression.GetWidth(), this);
    
    internal ExpressionBodySyntax(Green.ExpressionBodySyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class LetDeclarationSyntax : SyntaxNode
{
    public Token Let => (Token)((Green.LetDeclarationSyntax)green).Let.ToRed(position, this);

    public Token? Mut => (Token?)((Green.LetDeclarationSyntax)green).Mut?.ToRed(position + ((Green.LetDeclarationSyntax)green).Let.GetWidth(), this);

    public Token Name => (Token)((Green.LetDeclarationSyntax)green).Name.ToRed(position + ((Green.LetDeclarationSyntax)green).Let.GetWidth() + ((Green.LetDeclarationSyntax)green).Mut?.GetWidth() ?? 0, this);

    public Token Equals => (Token)((Green.LetDeclarationSyntax)green).Equals.ToRed(position + ((Green.LetDeclarationSyntax)green).Let.GetWidth() + ((Green.LetDeclarationSyntax)green).Mut?.GetWidth() ?? 0 + ((Green.LetDeclarationSyntax)green).Name.GetWidth(), this);

    public ExpressionSyntax Value => (ExpressionSyntax)((Green.LetDeclarationSyntax)green).Value.ToRed(position + ((Green.LetDeclarationSyntax)green).Let.GetWidth() + ((Green.LetDeclarationSyntax)green).Mut?.GetWidth() ?? 0 + ((Green.LetDeclarationSyntax)green).Name.GetWidth() + ((Green.LetDeclarationSyntax)green).Equals.GetWidth(), this);

    public Token Semicolon => (Token)((Green.LetDeclarationSyntax)green).Semicolon.ToRed(position + ((Green.LetDeclarationSyntax)green).Let.GetWidth() + ((Green.LetDeclarationSyntax)green).Mut?.GetWidth() ?? 0 + ((Green.LetDeclarationSyntax)green).Name.GetWidth() + ((Green.LetDeclarationSyntax)green).Equals.GetWidth() + ((Green.LetDeclarationSyntax)green).Value.GetWidth(), this);
    
    internal LetDeclarationSyntax(Green.LetDeclarationSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class AssignmentStatementSyntax : StatementSyntax
{
    public Token Identifier => (Token)((Green.AssignmentStatementSyntax)green).Identifier.ToRed(position, this);

    public Token Operator => (Token)((Green.AssignmentStatementSyntax)green).Operator.ToRed(position + ((Green.AssignmentStatementSyntax)green).Identifier.GetWidth(), this);

    public ExpressionSyntax Value => (ExpressionSyntax)((Green.AssignmentStatementSyntax)green).Value.ToRed(position + ((Green.AssignmentStatementSyntax)green).Identifier.GetWidth() + ((Green.AssignmentStatementSyntax)green).Operator.GetWidth(), this);

    public Token Semicolon => (Token)((Green.AssignmentStatementSyntax)green).Semicolon.ToRed(position + ((Green.AssignmentStatementSyntax)green).Identifier.GetWidth() + ((Green.AssignmentStatementSyntax)green).Operator.GetWidth() + ((Green.AssignmentStatementSyntax)green).Value.GetWidth(), this);
    
    internal AssignmentStatementSyntax(Green.AssignmentStatementSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class FlowControlStatement : SyntaxNode
{
    public ExpressionSyntax Expression => (ExpressionSyntax)((Green.FlowControlStatement)green).Expression.ToRed(position, this);
    
    internal FlowControlStatement(Green.FlowControlStatement green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ExpressionStatementSyntax : StatementSyntax
{
    public ExpressionSyntax Expression => (ExpressionSyntax)((Green.ExpressionStatementSyntax)green).Expression.ToRed(position, this);

    public Token Semicolon => (Token)((Green.ExpressionStatementSyntax)green).Semicolon.ToRed(position + ((Green.ExpressionStatementSyntax)green).Expression.GetWidth(), this);
    
    internal ExpressionStatementSyntax(Green.ExpressionStatementSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public abstract partial class ExpressionSyntax : SyntaxNode
{
    internal ExpressionSyntax(Green.ExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class BlockExpressionSyntax : ExpressionSyntax
{
    public Token OpenBrace => (Token)((Green.BlockExpressionSyntax)green).OpenBrace.ToRed(position, this);

    public SyntaxList<StatementSyntax> Statements => (SyntaxList<StatementSyntax>)((Green.BlockExpressionSyntax)green).Statements.ToRed<Green.StatementSyntax, StatementSyntax>(position + ((Green.BlockExpressionSyntax)green).OpenBrace.GetWidth(), this);

    public ExpressionSyntax TrailingExpression => (ExpressionSyntax)((Green.BlockExpressionSyntax)green).TrailingExpression.ToRed(position + ((Green.BlockExpressionSyntax)green).OpenBrace.GetWidth() + ((Green.BlockExpressionSyntax)green).Statements.GetWidth(), this);

    public Token CloseBrace => (Token)((Green.BlockExpressionSyntax)green).CloseBrace.ToRed(position + ((Green.BlockExpressionSyntax)green).OpenBrace.GetWidth() + ((Green.BlockExpressionSyntax)green).Statements.GetWidth() + ((Green.BlockExpressionSyntax)green).TrailingExpression.GetWidth(), this);
    
    internal BlockExpressionSyntax(Green.BlockExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class CallExpressionSyntax : ExpressionSyntax
{
    public ExpressionSyntax Target => (ExpressionSyntax)((Green.CallExpressionSyntax)green).Target.ToRed(position, this);

    public Token OpenParen => (Token)((Green.CallExpressionSyntax)green).OpenParen.ToRed(position + ((Green.CallExpressionSyntax)green).Target.GetWidth(), this);

    public SeparatedSyntaxList<ExpressionSyntax> Arguments => (SeparatedSyntaxList<ExpressionSyntax>)((Green.CallExpressionSyntax)green).Arguments.ToRed<Green.ExpressionSyntax, ExpressionSyntax>(position + ((Green.CallExpressionSyntax)green).Target.GetWidth() + ((Green.CallExpressionSyntax)green).OpenParen.GetWidth(), this);

    public Token CloseParen => (Token)((Green.CallExpressionSyntax)green).CloseParen.ToRed(position + ((Green.CallExpressionSyntax)green).Target.GetWidth() + ((Green.CallExpressionSyntax)green).OpenParen.GetWidth() + ((Green.CallExpressionSyntax)green).Arguments.GetWidth(), this);
    
    internal CallExpressionSyntax(Green.CallExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class LambdaExpressionSyntax : ExpressionSyntax
{
    public ParameterListSyntax Parameters => (ParameterListSyntax)((Green.LambdaExpressionSyntax)green).Parameters.ToRed(position, this);

    public Token Arrow => (Token)((Green.LambdaExpressionSyntax)green).Arrow.ToRed(position + ((Green.LambdaExpressionSyntax)green).Parameters.GetWidth(), this);

    public ExpressionSyntax Expression => (ExpressionSyntax)((Green.LambdaExpressionSyntax)green).Expression.ToRed(position + ((Green.LambdaExpressionSyntax)green).Parameters.GetWidth() + ((Green.LambdaExpressionSyntax)green).Arrow.GetWidth(), this);
    
    internal LambdaExpressionSyntax(Green.LambdaExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class TupleExpressionSyntax : ExpressionSyntax
{
    public Token OpenParen => (Token)((Green.TupleExpressionSyntax)green).OpenParen.ToRed(position, this);

    public SeparatedSyntaxList<ExpressionSyntax> Expressions => (SeparatedSyntaxList<ExpressionSyntax>)((Green.TupleExpressionSyntax)green).Expressions.ToRed<Green.ExpressionSyntax, ExpressionSyntax>(position + ((Green.TupleExpressionSyntax)green).OpenParen.GetWidth(), this);

    public Token CloseParen => (Token)((Green.TupleExpressionSyntax)green).CloseParen.ToRed(position + ((Green.TupleExpressionSyntax)green).OpenParen.GetWidth() + ((Green.TupleExpressionSyntax)green).Expressions.GetWidth(), this);
    
    internal TupleExpressionSyntax(Green.TupleExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ParenthesizedExpressionSyntax : ExpressionSyntax
{
    public ExpressionSyntax Expression => (ExpressionSyntax)((Green.ParenthesizedExpressionSyntax)green).Expression.ToRed(position, this);
    
    internal ParenthesizedExpressionSyntax(Green.ParenthesizedExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class IfExpressionSyntax : ExpressionSyntax
{
    public Token If => (Token)((Green.IfExpressionSyntax)green).If.ToRed(position, this);

    public Token OpenParen => (Token)((Green.IfExpressionSyntax)green).OpenParen.ToRed(position + ((Green.IfExpressionSyntax)green).If.GetWidth(), this);

    public ExpressionSyntax Condition => (ExpressionSyntax)((Green.IfExpressionSyntax)green).Condition.ToRed(position + ((Green.IfExpressionSyntax)green).If.GetWidth() + ((Green.IfExpressionSyntax)green).OpenParen.GetWidth(), this);

    public Token CloseParen => (Token)((Green.IfExpressionSyntax)green).CloseParen.ToRed(position + ((Green.IfExpressionSyntax)green).If.GetWidth() + ((Green.IfExpressionSyntax)green).OpenParen.GetWidth() + ((Green.IfExpressionSyntax)green).Condition.GetWidth(), this);

    public BlockExpressionSyntax Body => (BlockExpressionSyntax)((Green.IfExpressionSyntax)green).Body.ToRed(position + ((Green.IfExpressionSyntax)green).If.GetWidth() + ((Green.IfExpressionSyntax)green).OpenParen.GetWidth() + ((Green.IfExpressionSyntax)green).Condition.GetWidth() + ((Green.IfExpressionSyntax)green).CloseParen.GetWidth(), this);

    public ElseClauseSyntax Else => (ElseClauseSyntax)((Green.IfExpressionSyntax)green).Else.ToRed(position + ((Green.IfExpressionSyntax)green).If.GetWidth() + ((Green.IfExpressionSyntax)green).OpenParen.GetWidth() + ((Green.IfExpressionSyntax)green).Condition.GetWidth() + ((Green.IfExpressionSyntax)green).CloseParen.GetWidth() + ((Green.IfExpressionSyntax)green).Body.GetWidth(), this);
    
    internal IfExpressionSyntax(Green.IfExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ElseClauseSyntax : SyntaxNode
{
    public Token Else => (Token)((Green.ElseClauseSyntax)green).Else.ToRed(position, this);

    public BlockExpressionSyntax Body => (BlockExpressionSyntax)((Green.ElseClauseSyntax)green).Body.ToRed(position + ((Green.ElseClauseSyntax)green).Else.GetWidth(), this);
    
    internal ElseClauseSyntax(Green.ElseClauseSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class LoopExpression : ExpressionSyntax
{
    public Token Loop => (Token)((Green.LoopExpression)green).Loop.ToRed(position, this);

    public BlockExpressionSyntax Body => (BlockExpressionSyntax)((Green.LoopExpression)green).Body.ToRed(position + ((Green.LoopExpression)green).Loop.GetWidth(), this);
    
    internal LoopExpression(Green.LoopExpression green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ReturnExpressionSyntax : ExpressionSyntax
{
    public Token Return => (Token)((Green.ReturnExpressionSyntax)green).Return.ToRed(position, this);

    public ExpressionSyntax? Value => (ExpressionSyntax?)((Green.ReturnExpressionSyntax)green).Value?.ToRed(position + ((Green.ReturnExpressionSyntax)green).Return.GetWidth(), this);
    
    internal ReturnExpressionSyntax(Green.ReturnExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class BreakExpressionSyntax : ExpressionSyntax
{
    public Token Break => (Token)((Green.BreakExpressionSyntax)green).Break.ToRed(position, this);

    public ExpressionSyntax? Value => (ExpressionSyntax?)((Green.BreakExpressionSyntax)green).Value?.ToRed(position + ((Green.BreakExpressionSyntax)green).Break.GetWidth(), this);
    
    internal BreakExpressionSyntax(Green.BreakExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class ContinueExpressionSyntax : ExpressionSyntax
{
    public Token Continue => (Token)((Green.ContinueExpressionSyntax)green).Continue.ToRed(position, this);
    
    internal ContinueExpressionSyntax(Green.ContinueExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class UnaryExpressionSyntax : ExpressionSyntax
{
    public Token Operator => (Token)((Green.UnaryExpressionSyntax)green).Operator.ToRed(position, this);

    public ExpressionSyntax Operand => (ExpressionSyntax)((Green.UnaryExpressionSyntax)green).Operand.ToRed(position + ((Green.UnaryExpressionSyntax)green).Operator.GetWidth(), this);
    
    internal UnaryExpressionSyntax(Green.UnaryExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class BinaryExpressionSyntax : ExpressionSyntax
{
    public ExpressionSyntax Left => (ExpressionSyntax)((Green.BinaryExpressionSyntax)green).Left.ToRed(position, this);

    public Token Operator => (Token)((Green.BinaryExpressionSyntax)green).Operator.ToRed(position + ((Green.BinaryExpressionSyntax)green).Left.GetWidth(), this);

    public ExpressionSyntax Right => (ExpressionSyntax)((Green.BinaryExpressionSyntax)green).Right.ToRed(position + ((Green.BinaryExpressionSyntax)green).Left.GetWidth() + ((Green.BinaryExpressionSyntax)green).Operator.GetWidth(), this);
    
    internal BinaryExpressionSyntax(Green.BinaryExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class IdentifierExpressionSyntax : ExpressionSyntax
{
    public Token Identifier => (Token)((Green.IdentifierExpressionSyntax)green).Identifier.ToRed(position, this);
    
    internal IdentifierExpressionSyntax(Green.IdentifierExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class StringExpressionSyntax : ExpressionSyntax
{
    public Token OpenQuote => (Token)((Green.StringExpressionSyntax)green).OpenQuote.ToRed(position, this);

    public SyntaxList<StringPart> Parts => (SyntaxList<StringPart>)((Green.StringExpressionSyntax)green).Parts.ToRed<Green.StringPart, StringPart>(position + ((Green.StringExpressionSyntax)green).OpenQuote.GetWidth(), this);

    public Token CloseQuote => (Token)((Green.StringExpressionSyntax)green).CloseQuote.ToRed(position + ((Green.StringExpressionSyntax)green).OpenQuote.GetWidth() + ((Green.StringExpressionSyntax)green).Parts.GetWidth(), this);
    
    internal StringExpressionSyntax(Green.StringExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public abstract partial class StringPart : SyntaxNode
{
    internal StringPart(Green.StringPart green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class TextStringPart : StringPart
{
    public Token Text => (Token)((Green.TextStringPart)green).Text.ToRed(position, this);
    
    internal TextStringPart(Green.TextStringPart green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class InterpolationStringPart : StringPart
{
    public Token OpenDelimiter => (Token)((Green.InterpolationStringPart)green).OpenDelimiter.ToRed(position, this);

    public ExpressionSyntax Expression => (ExpressionSyntax)((Green.InterpolationStringPart)green).Expression.ToRed(position + ((Green.InterpolationStringPart)green).OpenDelimiter.GetWidth(), this);

    public Token CloseDelimiter => (Token)((Green.InterpolationStringPart)green).CloseDelimiter.ToRed(position + ((Green.InterpolationStringPart)green).OpenDelimiter.GetWidth() + ((Green.InterpolationStringPart)green).Expression.GetWidth(), this);
    
    internal InterpolationStringPart(Green.InterpolationStringPart green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class BoolExpressionSyntax : ExpressionSyntax
{
    public Token Value => (Token)((Green.BoolExpressionSyntax)green).Value.ToRed(position, this);
    
    internal BoolExpressionSyntax(Green.BoolExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class NumberExpressionSyntax : ExpressionSyntax
{
    public Token Value => (Token)((Green.NumberExpressionSyntax)green).Value.ToRed(position, this);
    
    internal NumberExpressionSyntax(Green.NumberExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}

public sealed partial class NilExpressionSyntax : ExpressionSyntax
{
    public Token OpenParen => (Token)((Green.NilExpressionSyntax)green).OpenParen.ToRed(position, this);

    public Token CloseParen => (Token)((Green.NilExpressionSyntax)green).CloseParen.ToRed(position + ((Green.NilExpressionSyntax)green).OpenParen.GetWidth(), this);
    
    internal NilExpressionSyntax(Green.NilExpressionSyntax green, int position, SyntaxNode parent) : base(green, position, parent) {}
}
