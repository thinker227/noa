// <auto-generated/>

#nullable enable
#pragma warning disable CS0108

using System.Diagnostics;

namespace Noa.Compiler.Syntax;

public sealed class RootSyntax : SyntaxNode
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.RootSyntax green;

    internal override Green.SyntaxNode Green => green;

    public SyntaxList<StatementSyntax> Statements => (SyntaxList<StatementSyntax>)green.Statements.ToRed(position, this);
    
    public ExpressionSyntax? TrailingExpression => (ExpressionSyntax?)green.TrailingExpression?.ToRed(position + green.Statements.GetWidth(), this);
    
    public Token EndOfFile => (Token)green.EndOfFile.ToRed(position + green.Statements.GetWidth() + (green.TrailingExpression?.GetWidth() ?? 0), this);
    
    internal RootSyntax(Green.RootSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Statements;
            if (TrailingExpression is not null) yield return TrailingExpression;
            yield return EndOfFile;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public abstract class StatementSyntax : SyntaxNode
{
    internal StatementSyntax(int position, SyntaxNode parent) : base(position, parent) {}
}

public abstract class DeclarationSyntax : StatementSyntax
{
    internal DeclarationSyntax(int position, SyntaxNode parent) : base(position, parent) {}
}

public sealed class FunctionDeclarationSyntax : DeclarationSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.FunctionDeclarationSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Func => (Token)green.Func.ToRed(position, this);
    
    public Token Name => (Token)green.Name.ToRed(position + green.Func.GetWidth(), this);
    
    public ParameterListSyntax Parameters => (ParameterListSyntax)green.Parameters.ToRed(position + green.Func.GetWidth() + green.Name.GetWidth(), this);
    
    public FunctionBodySyntax Body => (FunctionBodySyntax)green.Body.ToRed(position + green.Func.GetWidth() + green.Name.GetWidth() + green.Parameters.GetWidth(), this);
    
    internal FunctionDeclarationSyntax(Green.FunctionDeclarationSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Func;
            yield return Name;
            yield return Parameters;
            yield return Body;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ParameterListSyntax : SyntaxNode
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ParameterListSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token OpenParen => (Token)green.OpenParen.ToRed(position, this);
    
    public SeparatedSyntaxList<ParameterSyntax> Parameters => (SeparatedSyntaxList<ParameterSyntax>)green.Parameters.ToRed(position + green.OpenParen.GetWidth(), this);
    
    public Token CloseParen => (Token)green.CloseParen.ToRed(position + green.OpenParen.GetWidth() + green.Parameters.GetWidth(), this);
    
    internal ParameterListSyntax(Green.ParameterListSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return OpenParen;
            yield return Parameters;
            yield return CloseParen;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ParameterSyntax : SyntaxNode
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ParameterSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token? Mut => (Token?)green.Mut?.ToRed(position, this);
    
    public Token Name => (Token)green.Name.ToRed(position + (green.Mut?.GetWidth() ?? 0), this);
    
    internal ParameterSyntax(Green.ParameterSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            if (Mut is not null) yield return Mut;
            yield return Name;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public abstract class FunctionBodySyntax : SyntaxNode
{
    internal FunctionBodySyntax(int position, SyntaxNode parent) : base(position, parent) {}
}

public sealed class BlockBodySyntax : FunctionBodySyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.BlockBodySyntax green;

    internal override Green.SyntaxNode Green => green;

    public BlockExpressionSyntax Block => (BlockExpressionSyntax)green.Block.ToRed(position, this);
    
    internal BlockBodySyntax(Green.BlockBodySyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Block;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ExpressionBodySyntax : FunctionBodySyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ExpressionBodySyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Arrow => (Token)green.Arrow.ToRed(position, this);
    
    public ExpressionSyntax Expression => (ExpressionSyntax)green.Expression.ToRed(position + green.Arrow.GetWidth(), this);
    
    public Token Semicolon => (Token)green.Semicolon.ToRed(position + green.Arrow.GetWidth() + green.Expression.GetWidth(), this);
    
    internal ExpressionBodySyntax(Green.ExpressionBodySyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Arrow;
            yield return Expression;
            yield return Semicolon;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class LetDeclarationSyntax : DeclarationSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.LetDeclarationSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Let => (Token)green.Let.ToRed(position, this);
    
    public Token? Mut => (Token?)green.Mut?.ToRed(position + green.Let.GetWidth(), this);
    
    public Token Name => (Token)green.Name.ToRed(position + green.Let.GetWidth() + (green.Mut?.GetWidth() ?? 0), this);
    
    public Token Equals => (Token)green.Equals.ToRed(position + green.Let.GetWidth() + (green.Mut?.GetWidth() ?? 0) + green.Name.GetWidth(), this);
    
    public ExpressionSyntax Value => (ExpressionSyntax)green.Value.ToRed(position + green.Let.GetWidth() + (green.Mut?.GetWidth() ?? 0) + green.Name.GetWidth() + green.Equals.GetWidth(), this);
    
    public Token Semicolon => (Token)green.Semicolon.ToRed(position + green.Let.GetWidth() + (green.Mut?.GetWidth() ?? 0) + green.Name.GetWidth() + green.Equals.GetWidth() + green.Value.GetWidth(), this);
    
    internal LetDeclarationSyntax(Green.LetDeclarationSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Let;
            if (Mut is not null) yield return Mut;
            yield return Name;
            yield return Equals;
            yield return Value;
            yield return Semicolon;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class AssignmentStatementSyntax : StatementSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.AssignmentStatementSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ExpressionSyntax Target => (ExpressionSyntax)green.Target.ToRed(position, this);
    
    public Token Operator => (Token)green.Operator.ToRed(position + green.Target.GetWidth(), this);
    
    public ExpressionSyntax Value => (ExpressionSyntax)green.Value.ToRed(position + green.Target.GetWidth() + green.Operator.GetWidth(), this);
    
    public Token Semicolon => (Token)green.Semicolon.ToRed(position + green.Target.GetWidth() + green.Operator.GetWidth() + green.Value.GetWidth(), this);
    
    internal AssignmentStatementSyntax(Green.AssignmentStatementSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Target;
            yield return Operator;
            yield return Value;
            yield return Semicolon;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class FlowControlStatementSyntax : StatementSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.FlowControlStatementSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ExpressionSyntax Expression => (ExpressionSyntax)green.Expression.ToRed(position, this);
    
    internal FlowControlStatementSyntax(Green.FlowControlStatementSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Expression;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ExpressionStatementSyntax : StatementSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ExpressionStatementSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ExpressionSyntax Expression => (ExpressionSyntax)green.Expression.ToRed(position, this);
    
    public Token Semicolon => (Token)green.Semicolon.ToRed(position + green.Expression.GetWidth(), this);
    
    internal ExpressionStatementSyntax(Green.ExpressionStatementSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Expression;
            yield return Semicolon;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public abstract class ExpressionSyntax : SyntaxNode
{
    internal ExpressionSyntax(int position, SyntaxNode parent) : base(position, parent) {}
}

public sealed class ErrorExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ErrorExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    internal ErrorExpressionSyntax(Green.ErrorExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class BlockExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.BlockExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token OpenBrace => (Token)green.OpenBrace.ToRed(position, this);
    
    public SyntaxList<StatementSyntax> Statements => (SyntaxList<StatementSyntax>)green.Statements.ToRed(position + green.OpenBrace.GetWidth(), this);
    
    public ExpressionSyntax? TrailingExpression => (ExpressionSyntax?)green.TrailingExpression?.ToRed(position + green.OpenBrace.GetWidth() + green.Statements.GetWidth(), this);
    
    public Token CloseBrace => (Token)green.CloseBrace.ToRed(position + green.OpenBrace.GetWidth() + green.Statements.GetWidth() + (green.TrailingExpression?.GetWidth() ?? 0), this);
    
    internal BlockExpressionSyntax(Green.BlockExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return OpenBrace;
            yield return Statements;
            if (TrailingExpression is not null) yield return TrailingExpression;
            yield return CloseBrace;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class CallExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.CallExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ExpressionSyntax Target => (ExpressionSyntax)green.Target.ToRed(position, this);
    
    public Token OpenParen => (Token)green.OpenParen.ToRed(position + green.Target.GetWidth(), this);
    
    public SeparatedSyntaxList<ExpressionSyntax> Arguments => (SeparatedSyntaxList<ExpressionSyntax>)green.Arguments.ToRed(position + green.Target.GetWidth() + green.OpenParen.GetWidth(), this);
    
    public Token CloseParen => (Token)green.CloseParen.ToRed(position + green.Target.GetWidth() + green.OpenParen.GetWidth() + green.Arguments.GetWidth(), this);
    
    internal CallExpressionSyntax(Green.CallExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Target;
            yield return OpenParen;
            yield return Arguments;
            yield return CloseParen;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class LambdaExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.LambdaExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ParameterListSyntax Parameters => (ParameterListSyntax)green.Parameters.ToRed(position, this);
    
    public Token Arrow => (Token)green.Arrow.ToRed(position + green.Parameters.GetWidth(), this);
    
    public ExpressionSyntax Expression => (ExpressionSyntax)green.Expression.ToRed(position + green.Parameters.GetWidth() + green.Arrow.GetWidth(), this);
    
    internal LambdaExpressionSyntax(Green.LambdaExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Parameters;
            yield return Arrow;
            yield return Expression;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class TupleExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.TupleExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token OpenParen => (Token)green.OpenParen.ToRed(position, this);
    
    public SeparatedSyntaxList<ExpressionSyntax> Expressions => (SeparatedSyntaxList<ExpressionSyntax>)green.Expressions.ToRed(position + green.OpenParen.GetWidth(), this);
    
    public Token CloseParen => (Token)green.CloseParen.ToRed(position + green.OpenParen.GetWidth() + green.Expressions.GetWidth(), this);
    
    internal TupleExpressionSyntax(Green.TupleExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return OpenParen;
            yield return Expressions;
            yield return CloseParen;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ParenthesizedExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ParenthesizedExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ExpressionSyntax Expression => (ExpressionSyntax)green.Expression.ToRed(position, this);
    
    internal ParenthesizedExpressionSyntax(Green.ParenthesizedExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Expression;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class IfExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.IfExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token If => (Token)green.If.ToRed(position, this);
    
    public ExpressionSyntax Condition => (ExpressionSyntax)green.Condition.ToRed(position + green.If.GetWidth(), this);
    
    public BlockExpressionSyntax Body => (BlockExpressionSyntax)green.Body.ToRed(position + green.If.GetWidth() + green.Condition.GetWidth(), this);
    
    public ElseClauseSyntax? Else => (ElseClauseSyntax?)green.Else?.ToRed(position + green.If.GetWidth() + green.Condition.GetWidth() + green.Body.GetWidth(), this);
    
    internal IfExpressionSyntax(Green.IfExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return If;
            yield return Condition;
            yield return Body;
            if (Else is not null) yield return Else;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ElseClauseSyntax : SyntaxNode
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ElseClauseSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Else => (Token)green.Else.ToRed(position, this);
    
    public BlockExpressionSyntax Body => (BlockExpressionSyntax)green.Body.ToRed(position + green.Else.GetWidth(), this);
    
    internal ElseClauseSyntax(Green.ElseClauseSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Else;
            yield return Body;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class LoopExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.LoopExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Loop => (Token)green.Loop.ToRed(position, this);
    
    public BlockExpressionSyntax Body => (BlockExpressionSyntax)green.Body.ToRed(position + green.Loop.GetWidth(), this);
    
    internal LoopExpressionSyntax(Green.LoopExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Loop;
            yield return Body;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ReturnExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ReturnExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Return => (Token)green.Return.ToRed(position, this);
    
    public ExpressionSyntax? Value => (ExpressionSyntax?)green.Value?.ToRed(position + green.Return.GetWidth(), this);
    
    internal ReturnExpressionSyntax(Green.ReturnExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Return;
            if (Value is not null) yield return Value;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class BreakExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.BreakExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Break => (Token)green.Break.ToRed(position, this);
    
    public ExpressionSyntax? Value => (ExpressionSyntax?)green.Value?.ToRed(position + green.Break.GetWidth(), this);
    
    internal BreakExpressionSyntax(Green.BreakExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Break;
            if (Value is not null) yield return Value;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class ContinueExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.ContinueExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Continue => (Token)green.Continue.ToRed(position, this);
    
    internal ContinueExpressionSyntax(Green.ContinueExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Continue;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class UnaryExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.UnaryExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Operator => (Token)green.Operator.ToRed(position, this);
    
    public ExpressionSyntax Operand => (ExpressionSyntax)green.Operand.ToRed(position + green.Operator.GetWidth(), this);
    
    internal UnaryExpressionSyntax(Green.UnaryExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Operator;
            yield return Operand;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class BinaryExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.BinaryExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public ExpressionSyntax Left => (ExpressionSyntax)green.Left.ToRed(position, this);
    
    public Token Operator => (Token)green.Operator.ToRed(position + green.Left.GetWidth(), this);
    
    public ExpressionSyntax Right => (ExpressionSyntax)green.Right.ToRed(position + green.Left.GetWidth() + green.Operator.GetWidth(), this);
    
    internal BinaryExpressionSyntax(Green.BinaryExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Left;
            yield return Operator;
            yield return Right;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class IdentifierExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.IdentifierExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Identifier => (Token)green.Identifier.ToRed(position, this);
    
    internal IdentifierExpressionSyntax(Green.IdentifierExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Identifier;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class StringExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.StringExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token OpenQuote => (Token)green.OpenQuote.ToRed(position, this);
    
    public SyntaxList<StringPartSyntax> Parts => (SyntaxList<StringPartSyntax>)green.Parts.ToRed(position + green.OpenQuote.GetWidth(), this);
    
    public Token CloseQuote => (Token)green.CloseQuote.ToRed(position + green.OpenQuote.GetWidth() + green.Parts.GetWidth(), this);
    
    internal StringExpressionSyntax(Green.StringExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return OpenQuote;
            yield return Parts;
            yield return CloseQuote;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public abstract class StringPartSyntax : SyntaxNode
{
    internal StringPartSyntax(int position, SyntaxNode parent) : base(position, parent) {}
}

public sealed class TextStringPartSyntax : StringPartSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.TextStringPartSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Text => (Token)green.Text.ToRed(position, this);
    
    internal TextStringPartSyntax(Green.TextStringPartSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Text;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class InterpolationStringPartSyntax : StringPartSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.InterpolationStringPartSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token OpenDelimiter => (Token)green.OpenDelimiter.ToRed(position, this);
    
    public ExpressionSyntax Expression => (ExpressionSyntax)green.Expression.ToRed(position + green.OpenDelimiter.GetWidth(), this);
    
    public Token CloseDelimiter => (Token)green.CloseDelimiter.ToRed(position + green.OpenDelimiter.GetWidth() + green.Expression.GetWidth(), this);
    
    internal InterpolationStringPartSyntax(Green.InterpolationStringPartSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return OpenDelimiter;
            yield return Expression;
            yield return CloseDelimiter;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class BoolExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.BoolExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Value => (Token)green.Value.ToRed(position, this);
    
    internal BoolExpressionSyntax(Green.BoolExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Value;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class NumberExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.NumberExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token Value => (Token)green.Value.ToRed(position, this);
    
    internal NumberExpressionSyntax(Green.NumberExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return Value;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}

public sealed class NilExpressionSyntax : ExpressionSyntax
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly Green.NilExpressionSyntax green;

    internal override Green.SyntaxNode Green => green;

    public Token OpenParen => (Token)green.OpenParen.ToRed(position, this);
    
    public Token CloseParen => (Token)green.CloseParen.ToRed(position + green.OpenParen.GetWidth(), this);
    
    internal NilExpressionSyntax(Green.NilExpressionSyntax green, int position, SyntaxNode parent) : base(position, parent) =>
        this.green = green;
    
    public override IEnumerable<SyntaxNode> Children
    {
        get
        {
            yield return OpenParen;
            yield return CloseParen;
            yield break;
        }
    }
    
    protected override int GetWidth() => green.GetWidth();
}
