// <auto-generated/>

#nullable enable

namespace Noa.Compiler.Syntax;

public static partial class SyntaxFactory
{
    public static BlockSyntax Block(SyntaxList<StatementSyntax> @statements, ExpressionSyntax? @trailingExpression)
    {
        var green = new Green.BlockSyntax()
        {
            Statements = (Green.SyntaxList<Green.StatementSyntax>)@statements.Green,
            TrailingExpression = (Green.ExpressionSyntax?)@trailingExpression?.Green
        };

        return (BlockSyntax)green.ToRed(0, null!);
    }

    public static RootSyntax Root(BlockSyntax @block, Token @endOfFile)
    {
        var green = new Green.RootSyntax()
        {
            Block = (Green.BlockSyntax)@block.Green,
            EndOfFile = (Green.Token)@endOfFile.Green
        };

        return (RootSyntax)green.ToRed(0, null!);
    }

    public static FunctionDeclarationSyntax FunctionDeclaration(Token @func, Token @name, ParameterListSyntax @parameters, FunctionBodySyntax @body)
    {
        var green = new Green.FunctionDeclarationSyntax()
        {
            Func = (Green.Token)@func.Green,
            Name = (Green.Token)@name.Green,
            Parameters = (Green.ParameterListSyntax)@parameters.Green,
            Body = (Green.FunctionBodySyntax)@body.Green
        };

        return (FunctionDeclarationSyntax)green.ToRed(0, null!);
    }

    public static ParameterListSyntax ParameterList(Token @openParen, SeparatedSyntaxList<ParameterSyntax> @parameters, Token @closeParen)
    {
        var green = new Green.ParameterListSyntax()
        {
            OpenParen = (Green.Token)@openParen.Green,
            Parameters = (Green.SeparatedSyntaxList<Green.ParameterSyntax>)@parameters.Green,
            CloseParen = (Green.Token)@closeParen.Green
        };

        return (ParameterListSyntax)green.ToRed(0, null!);
    }

    public static ParameterSyntax Parameter(Token? @mut, Token @name)
    {
        var green = new Green.ParameterSyntax()
        {
            Mut = (Green.Token?)@mut?.Green,
            Name = (Green.Token)@name.Green
        };

        return (ParameterSyntax)green.ToRed(0, null!);
    }

    public static BlockBodySyntax BlockBody(BlockExpressionSyntax @block)
    {
        var green = new Green.BlockBodySyntax()
        {
            Block = (Green.BlockExpressionSyntax)@block.Green
        };

        return (BlockBodySyntax)green.ToRed(0, null!);
    }

    public static ExpressionBodySyntax ExpressionBody(Token @arrow, ExpressionSyntax @expression, Token @semicolon)
    {
        var green = new Green.ExpressionBodySyntax()
        {
            Arrow = (Green.Token)@arrow.Green,
            Expression = (Green.ExpressionSyntax)@expression.Green,
            Semicolon = (Green.Token)@semicolon.Green
        };

        return (ExpressionBodySyntax)green.ToRed(0, null!);
    }

    public static LetDeclarationSyntax LetDeclaration(Token @let, Token? @mut, Token @name, Token @equalsToken, ExpressionSyntax @value, Token @semicolon)
    {
        var green = new Green.LetDeclarationSyntax()
        {
            Let = (Green.Token)@let.Green,
            Mut = (Green.Token?)@mut?.Green,
            Name = (Green.Token)@name.Green,
            EqualsToken = (Green.Token)@equalsToken.Green,
            Value = (Green.ExpressionSyntax)@value.Green,
            Semicolon = (Green.Token)@semicolon.Green
        };

        return (LetDeclarationSyntax)green.ToRed(0, null!);
    }

    public static AssignmentStatementSyntax AssignmentStatement(ExpressionSyntax @target, Token @operator, ExpressionSyntax @value, Token @semicolon)
    {
        var green = new Green.AssignmentStatementSyntax()
        {
            Target = (Green.ExpressionSyntax)@target.Green,
            Operator = (Green.Token)@operator.Green,
            Value = (Green.ExpressionSyntax)@value.Green,
            Semicolon = (Green.Token)@semicolon.Green
        };

        return (AssignmentStatementSyntax)green.ToRed(0, null!);
    }

    public static FlowControlStatementSyntax FlowControlStatement(ExpressionSyntax @expression)
    {
        var green = new Green.FlowControlStatementSyntax()
        {
            Expression = (Green.ExpressionSyntax)@expression.Green
        };

        return (FlowControlStatementSyntax)green.ToRed(0, null!);
    }

    public static ExpressionStatementSyntax ExpressionStatement(ExpressionSyntax @expression, Token @semicolon)
    {
        var green = new Green.ExpressionStatementSyntax()
        {
            Expression = (Green.ExpressionSyntax)@expression.Green,
            Semicolon = (Green.Token)@semicolon.Green
        };

        return (ExpressionStatementSyntax)green.ToRed(0, null!);
    }

    public static ErrorExpressionSyntax ErrorExpression()
    {
        var green = new Green.ErrorExpressionSyntax()
        {
        };

        return (ErrorExpressionSyntax)green.ToRed(0, null!);
    }

    public static BlockExpressionSyntax BlockExpression(Token @openBrace, BlockSyntax @block, Token @closeBrace)
    {
        var green = new Green.BlockExpressionSyntax()
        {
            OpenBrace = (Green.Token)@openBrace.Green,
            Block = (Green.BlockSyntax)@block.Green,
            CloseBrace = (Green.Token)@closeBrace.Green
        };

        return (BlockExpressionSyntax)green.ToRed(0, null!);
    }

    public static CallExpressionSyntax CallExpression(ExpressionSyntax @target, Token @openParen, SeparatedSyntaxList<ExpressionSyntax> @arguments, Token @closeParen)
    {
        var green = new Green.CallExpressionSyntax()
        {
            Target = (Green.ExpressionSyntax)@target.Green,
            OpenParen = (Green.Token)@openParen.Green,
            Arguments = (Green.SeparatedSyntaxList<Green.ExpressionSyntax>)@arguments.Green,
            CloseParen = (Green.Token)@closeParen.Green
        };

        return (CallExpressionSyntax)green.ToRed(0, null!);
    }

    public static LambdaExpressionSyntax LambdaExpression(ParameterListSyntax @parameters, Token @arrow, ExpressionSyntax @expression)
    {
        var green = new Green.LambdaExpressionSyntax()
        {
            Parameters = (Green.ParameterListSyntax)@parameters.Green,
            Arrow = (Green.Token)@arrow.Green,
            Expression = (Green.ExpressionSyntax)@expression.Green
        };

        return (LambdaExpressionSyntax)green.ToRed(0, null!);
    }

    public static TupleExpressionSyntax TupleExpression(Token @openParen, SeparatedSyntaxList<ExpressionSyntax> @expressions, Token @closeParen)
    {
        var green = new Green.TupleExpressionSyntax()
        {
            OpenParen = (Green.Token)@openParen.Green,
            Expressions = (Green.SeparatedSyntaxList<Green.ExpressionSyntax>)@expressions.Green,
            CloseParen = (Green.Token)@closeParen.Green
        };

        return (TupleExpressionSyntax)green.ToRed(0, null!);
    }

    public static ObjectExpressionSyntax ObjectExpression(Token? @dynToken, Token @openBraceToken, SeparatedSyntaxList<FieldSyntax> @fields, Token @closeBraceToken)
    {
        var green = new Green.ObjectExpressionSyntax()
        {
            DynToken = (Green.Token?)@dynToken?.Green,
            OpenBraceToken = (Green.Token)@openBraceToken.Green,
            Fields = (Green.SeparatedSyntaxList<Green.FieldSyntax>)@fields.Green,
            CloseBraceToken = (Green.Token)@closeBraceToken.Green
        };

        return (ObjectExpressionSyntax)green.ToRed(0, null!);
    }

    public static FieldSyntax Field(Token? @mutToken, FieldNameSyntax? @name, Token @colonToken, ExpressionSyntax @value)
    {
        var green = new Green.FieldSyntax()
        {
            MutToken = (Green.Token?)@mutToken?.Green,
            Name = (Green.FieldNameSyntax?)@name?.Green,
            ColonToken = (Green.Token)@colonToken.Green,
            Value = (Green.ExpressionSyntax)@value.Green
        };

        return (FieldSyntax)green.ToRed(0, null!);
    }

    public static SimpleFieldNameSyntax SimpleFieldName(Token @nameToken)
    {
        var green = new Green.SimpleFieldNameSyntax()
        {
            NameToken = (Green.Token)@nameToken.Green
        };

        return (SimpleFieldNameSyntax)green.ToRed(0, null!);
    }

    public static StringFieldNameSyntax StringFieldName(StringExpressionSyntax @string)
    {
        var green = new Green.StringFieldNameSyntax()
        {
            String = (Green.StringExpressionSyntax)@string.Green
        };

        return (StringFieldNameSyntax)green.ToRed(0, null!);
    }

    public static ExpressionFieldNameSyntax ExpressionFieldName(Token @openParenToken, ExpressionSyntax @expression, Token @closeParenToken)
    {
        var green = new Green.ExpressionFieldNameSyntax()
        {
            OpenParenToken = (Green.Token)@openParenToken.Green,
            Expression = (Green.ExpressionSyntax)@expression.Green,
            CloseParenToken = (Green.Token)@closeParenToken.Green
        };

        return (ExpressionFieldNameSyntax)green.ToRed(0, null!);
    }

    public static ParenthesizedExpressionSyntax ParenthesizedExpression(Token @openParen, ExpressionSyntax @expression, Token @closeParen)
    {
        var green = new Green.ParenthesizedExpressionSyntax()
        {
            OpenParen = (Green.Token)@openParen.Green,
            Expression = (Green.ExpressionSyntax)@expression.Green,
            CloseParen = (Green.Token)@closeParen.Green
        };

        return (ParenthesizedExpressionSyntax)green.ToRed(0, null!);
    }

    public static IfExpressionSyntax IfExpression(Token @if, ExpressionSyntax @condition, BlockExpressionSyntax @body, ElseClauseSyntax? @else)
    {
        var green = new Green.IfExpressionSyntax()
        {
            If = (Green.Token)@if.Green,
            Condition = (Green.ExpressionSyntax)@condition.Green,
            Body = (Green.BlockExpressionSyntax)@body.Green,
            Else = (Green.ElseClauseSyntax?)@else?.Green
        };

        return (IfExpressionSyntax)green.ToRed(0, null!);
    }

    public static ElseClauseSyntax ElseClause(Token @else, BlockExpressionSyntax @body)
    {
        var green = new Green.ElseClauseSyntax()
        {
            Else = (Green.Token)@else.Green,
            Body = (Green.BlockExpressionSyntax)@body.Green
        };

        return (ElseClauseSyntax)green.ToRed(0, null!);
    }

    public static LoopExpressionSyntax LoopExpression(Token @loop, BlockExpressionSyntax @body)
    {
        var green = new Green.LoopExpressionSyntax()
        {
            Loop = (Green.Token)@loop.Green,
            Body = (Green.BlockExpressionSyntax)@body.Green
        };

        return (LoopExpressionSyntax)green.ToRed(0, null!);
    }

    public static ReturnExpressionSyntax ReturnExpression(Token @return, ExpressionSyntax? @value)
    {
        var green = new Green.ReturnExpressionSyntax()
        {
            Return = (Green.Token)@return.Green,
            Value = (Green.ExpressionSyntax?)@value?.Green
        };

        return (ReturnExpressionSyntax)green.ToRed(0, null!);
    }

    public static BreakExpressionSyntax BreakExpression(Token @break, ExpressionSyntax? @value)
    {
        var green = new Green.BreakExpressionSyntax()
        {
            Break = (Green.Token)@break.Green,
            Value = (Green.ExpressionSyntax?)@value?.Green
        };

        return (BreakExpressionSyntax)green.ToRed(0, null!);
    }

    public static ContinueExpressionSyntax ContinueExpression(Token @continue)
    {
        var green = new Green.ContinueExpressionSyntax()
        {
            Continue = (Green.Token)@continue.Green
        };

        return (ContinueExpressionSyntax)green.ToRed(0, null!);
    }

    public static UnaryExpressionSyntax UnaryExpression(Token @operator, ExpressionSyntax @operand)
    {
        var green = new Green.UnaryExpressionSyntax()
        {
            Operator = (Green.Token)@operator.Green,
            Operand = (Green.ExpressionSyntax)@operand.Green
        };

        return (UnaryExpressionSyntax)green.ToRed(0, null!);
    }

    public static BinaryExpressionSyntax BinaryExpression(ExpressionSyntax @left, Token @operator, ExpressionSyntax @right)
    {
        var green = new Green.BinaryExpressionSyntax()
        {
            Left = (Green.ExpressionSyntax)@left.Green,
            Operator = (Green.Token)@operator.Green,
            Right = (Green.ExpressionSyntax)@right.Green
        };

        return (BinaryExpressionSyntax)green.ToRed(0, null!);
    }

    public static AccessExpressionSyntax AccessExpression(ExpressionSyntax @target, Token @dotToken, FieldNameSyntax @name)
    {
        var green = new Green.AccessExpressionSyntax()
        {
            Target = (Green.ExpressionSyntax)@target.Green,
            DotToken = (Green.Token)@dotToken.Green,
            Name = (Green.FieldNameSyntax)@name.Green
        };

        return (AccessExpressionSyntax)green.ToRed(0, null!);
    }

    public static IdentifierExpressionSyntax IdentifierExpression(Token @identifier)
    {
        var green = new Green.IdentifierExpressionSyntax()
        {
            Identifier = (Green.Token)@identifier.Green
        };

        return (IdentifierExpressionSyntax)green.ToRed(0, null!);
    }

    public static StringExpressionSyntax StringExpression(Token @openQuote, SyntaxList<StringPartSyntax> @parts, Token @closeQuote)
    {
        var green = new Green.StringExpressionSyntax()
        {
            OpenQuote = (Green.Token)@openQuote.Green,
            Parts = (Green.SyntaxList<Green.StringPartSyntax>)@parts.Green,
            CloseQuote = (Green.Token)@closeQuote.Green
        };

        return (StringExpressionSyntax)green.ToRed(0, null!);
    }

    public static TextStringPartSyntax TextStringPart(Token @text)
    {
        var green = new Green.TextStringPartSyntax()
        {
            Text = (Green.Token)@text.Green
        };

        return (TextStringPartSyntax)green.ToRed(0, null!);
    }

    public static InterpolationStringPartSyntax InterpolationStringPart(Token @openDelimiter, ExpressionSyntax @expression, Token @closeDelimiter)
    {
        var green = new Green.InterpolationStringPartSyntax()
        {
            OpenDelimiter = (Green.Token)@openDelimiter.Green,
            Expression = (Green.ExpressionSyntax)@expression.Green,
            CloseDelimiter = (Green.Token)@closeDelimiter.Green
        };

        return (InterpolationStringPartSyntax)green.ToRed(0, null!);
    }

    public static BoolExpressionSyntax BoolExpression(Token @value)
    {
        var green = new Green.BoolExpressionSyntax()
        {
            Value = (Green.Token)@value.Green
        };

        return (BoolExpressionSyntax)green.ToRed(0, null!);
    }

    public static NumberExpressionSyntax NumberExpression(Token @value)
    {
        var green = new Green.NumberExpressionSyntax()
        {
            Value = (Green.Token)@value.Green
        };

        return (NumberExpressionSyntax)green.ToRed(0, null!);
    }

    public static NilExpressionSyntax NilExpression(Token @openParen, Token @closeParen)
    {
        var green = new Green.NilExpressionSyntax()
        {
            OpenParen = (Green.Token)@openParen.Green,
            CloseParen = (Green.Token)@closeParen.Green
        };

        return (NilExpressionSyntax)green.ToRed(0, null!);
    }
}
