// <auto-generated/>

namespace Noa.Compiler.Nodes;

public abstract partial class Visitor
{
    public virtual void Visit(Node node)
    {
        if (!Filter(node)) return;

        BeforeVisit(node);

        switch (node)
        {
        case Identifier x:
            VisitIdentifier(x);
            break;
        case Statement x:
            VisitStatement(x);
            break;
        case Parameter x:
            VisitParameter(x);
            break;
        case Expression x:
            VisitExpression(x);
            break;
        default:
            throw new UnreachableException();
        }

        AfterVisit(node);
    }

    protected virtual void VisitRoot(Root node)
    {
        Visit(node.Statements);
        Visit(node.TrailingExpression);
    }

    protected virtual void VisitIdentifier(Identifier node) {}

    protected virtual void VisitStatement(Statement node)
    {
        switch (node)
        {
        case Declaration x:
            VisitDeclaration(x);
            break;
        case AssignmentStatement x:
            VisitAssignmentStatement(x);
            break;
        case ExpressionStatement x:
            VisitExpressionStatement(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitParameter(Parameter node)
    {
        Visit(node.Identifier);
    }

    protected virtual void VisitDeclaration(Declaration node)
    {
        switch (node)
        {
        case FunctionDeclaration x:
            VisitFunctionDeclaration(x);
            break;
        case LetDeclaration x:
            VisitLetDeclaration(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitFunctionDeclaration(FunctionDeclaration node)
    {
        Visit(node.Identifier);
        Visit(node.Parameters);
        Visit(node.ExpressionBody);
        Visit(node.BlockBody);
    }

    protected virtual void VisitLetDeclaration(LetDeclaration node)
    {
        Visit(node.Identifier);
        Visit(node.Expression);
    }

    protected virtual void VisitAssignmentStatement(AssignmentStatement node)
    {
        Visit(node.Target);
        Visit(node.Value);
    }

    protected virtual void VisitExpressionStatement(ExpressionStatement node)
    {
        Visit(node.Expression);
    }

    protected virtual void VisitExpression(Expression node)
    {
        switch (node)
        {
        case Root x:
            VisitRoot(x);
            break;
        case ErrorExpression x:
            VisitErrorExpression(x);
            break;
        case BlockExpression x:
            VisitBlockExpression(x);
            break;
        case CallExpression x:
            VisitCallExpression(x);
            break;
        case LambdaExpression x:
            VisitLambdaExpression(x);
            break;
        case TupleExpression x:
            VisitTupleExpression(x);
            break;
        case IfExpression x:
            VisitIfExpression(x);
            break;
        case LoopExpression x:
            VisitLoopExpression(x);
            break;
        case ReturnExpression x:
            VisitReturnExpression(x);
            break;
        case BreakExpression x:
            VisitBreakExpression(x);
            break;
        case ContinueExpression x:
            VisitContinueExpression(x);
            break;
        case UnaryExpression x:
            VisitUnaryExpression(x);
            break;
        case BinaryExpression x:
            VisitBinaryExpression(x);
            break;
        case IdentifierExpression x:
            VisitIdentifierExpression(x);
            break;
        case StringExpression x:
            VisitStringExpression(x);
            break;
        case BoolExpression x:
            VisitBoolExpression(x);
            break;
        case NumberExpression x:
            VisitNumberExpression(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitErrorExpression(ErrorExpression node) {}

    protected virtual void VisitBlockExpression(BlockExpression node)
    {
        Visit(node.Statements);
        Visit(node.TrailingExpression);
    }

    protected virtual void VisitCallExpression(CallExpression node)
    {
        Visit(node.Target);
        Visit(node.Arguments);
    }

    protected virtual void VisitLambdaExpression(LambdaExpression node)
    {
        Visit(node.Parameters);
        Visit(node.Body);
    }

    protected virtual void VisitTupleExpression(TupleExpression node)
    {
        Visit(node.Expressions);
    }

    protected virtual void VisitIfExpression(IfExpression node)
    {
        Visit(node.Condition);
        Visit(node.IfTrue);
        Visit(node.IfFalse);
    }

    protected virtual void VisitLoopExpression(LoopExpression node)
    {
        Visit(node.Block);
    }

    protected virtual void VisitReturnExpression(ReturnExpression node)
    {
        Visit(node.Expression);
    }

    protected virtual void VisitBreakExpression(BreakExpression node)
    {
        Visit(node.Expression);
    }

    protected virtual void VisitContinueExpression(ContinueExpression node) {}

    protected virtual void VisitUnaryExpression(UnaryExpression node)
    {
        Visit(node.Operand);
    }

    protected virtual void VisitBinaryExpression(BinaryExpression node)
    {
        Visit(node.Left);
        Visit(node.Right);
    }

    protected virtual void VisitIdentifierExpression(IdentifierExpression node) {}

    protected virtual void VisitStringExpression(StringExpression node) {}

    protected virtual void VisitBoolExpression(BoolExpression node) {}

    protected virtual void VisitNumberExpression(NumberExpression node) {}
}
