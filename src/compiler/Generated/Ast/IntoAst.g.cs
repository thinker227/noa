// <auto-generated/>

#nullable enable

using Noa.Compiler.Syntax;

namespace Noa.Compiler.Nodes;

internal abstract class IntoAstBase
{
    public abstract Root FromRoot(RootSyntax syntax);

    public abstract Identifier FromIdentifier(Token syntax);

    public Statement FromStatement(StatementSyntax syntax) => syntax switch
    {
        DeclarationSyntax x => FromDeclaration(x),
        AssignmentStatementSyntax x => FromAssignmentStatement(x),
        ExpressionStatementSyntax x => FromExpressionStatement(x),
        var x => FromAdditionalStatement(x)
    };

    protected virtual Statement FromAdditionalStatement(StatementSyntax syntax) =>
        throw new UnreachableException();

    public abstract Parameter FromParameter(ParameterSyntax syntax);

    public Declaration FromDeclaration(DeclarationSyntax syntax) => syntax switch
    {
        FunctionDeclarationSyntax x => FromFunctionDeclaration(x),
        LetDeclarationSyntax x => FromLetDeclaration(x),
        var x => FromAdditionalDeclaration(x)
    };

    protected virtual Declaration FromAdditionalDeclaration(DeclarationSyntax syntax) =>
        throw new UnreachableException();

    public abstract FunctionDeclaration FromFunctionDeclaration(FunctionDeclarationSyntax syntax);

    public abstract LetDeclaration FromLetDeclaration(LetDeclarationSyntax syntax);

    public abstract AssignmentStatement FromAssignmentStatement(AssignmentStatementSyntax syntax);

    public abstract ExpressionStatement FromExpressionStatement(ExpressionStatementSyntax syntax);

    public Expression FromExpression(ExpressionSyntax syntax) => syntax switch
    {
        ErrorExpressionSyntax x => FromErrorExpression(x),
        BlockExpressionSyntax x => FromBlockExpression(x),
        CallExpressionSyntax x => FromCallExpression(x),
        LambdaExpressionSyntax x => FromLambdaExpression(x),
        TupleExpressionSyntax x => FromTupleExpression(x),
        IfExpressionSyntax x => FromIfExpression(x),
        LoopExpressionSyntax x => FromLoopExpression(x),
        ReturnExpressionSyntax x => FromReturnExpression(x),
        BreakExpressionSyntax x => FromBreakExpression(x),
        ContinueExpressionSyntax x => FromContinueExpression(x),
        UnaryExpressionSyntax x => FromUnaryExpression(x),
        BinaryExpressionSyntax x => FromBinaryExpression(x),
        IdentifierExpressionSyntax x => FromIdentifierExpression(x),
        StringExpressionSyntax x => FromStringExpression(x),
        BoolExpressionSyntax x => FromBoolExpression(x),
        NumberExpressionSyntax x => FromNumberExpression(x),
        NilExpressionSyntax x => FromNilExpression(x),
        var x => FromAdditionalExpression(x)
    };

    protected virtual Expression FromAdditionalExpression(ExpressionSyntax syntax) =>
        throw new UnreachableException();

    public abstract ErrorExpression FromErrorExpression(ErrorExpressionSyntax syntax);

    public abstract BlockExpression FromBlockExpression(BlockExpressionSyntax syntax);

    public abstract CallExpression FromCallExpression(CallExpressionSyntax syntax);

    public abstract LambdaExpression FromLambdaExpression(LambdaExpressionSyntax syntax);

    public abstract TupleExpression FromTupleExpression(TupleExpressionSyntax syntax);

    public abstract IfExpression FromIfExpression(IfExpressionSyntax syntax);

    public abstract ElseClause FromElseClause(ElseClauseSyntax syntax);

    public abstract LoopExpression FromLoopExpression(LoopExpressionSyntax syntax);

    public abstract ReturnExpression FromReturnExpression(ReturnExpressionSyntax syntax);

    public abstract BreakExpression FromBreakExpression(BreakExpressionSyntax syntax);

    public abstract ContinueExpression FromContinueExpression(ContinueExpressionSyntax syntax);

    public abstract UnaryExpression FromUnaryExpression(UnaryExpressionSyntax syntax);

    public abstract BinaryExpression FromBinaryExpression(BinaryExpressionSyntax syntax);

    public abstract IdentifierExpression FromIdentifierExpression(IdentifierExpressionSyntax syntax);

    public abstract StringExpression FromStringExpression(StringExpressionSyntax syntax);

    public StringPart FromStringPart(StringPartSyntax syntax) => syntax switch
    {
        TextStringPartSyntax x => FromTextStringPart(x),
        InterpolationStringPartSyntax x => FromInterpolationStringPart(x),
        var x => FromAdditionalStringPart(x)
    };

    protected virtual StringPart FromAdditionalStringPart(StringPartSyntax syntax) =>
        throw new UnreachableException();

    public abstract TextStringPart FromTextStringPart(TextStringPartSyntax syntax);

    public abstract InterpolationStringPart FromInterpolationStringPart(InterpolationStringPartSyntax syntax);

    public abstract BoolExpression FromBoolExpression(BoolExpressionSyntax syntax);

    public abstract NumberExpression FromNumberExpression(NumberExpressionSyntax syntax);

    public abstract NilExpression FromNilExpression(NilExpressionSyntax syntax);
}
