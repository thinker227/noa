// <auto-generated/>

#nullable enable

namespace Noa.Compiler.Nodes;

public abstract partial class Visitor
{
    private void CoreVisit(Node node)
    {
        switch (node)
        {
        case Block x:
            VisitBlock(x);
            break;
        case Root x:
            VisitRoot(x);
            break;
        case Identifier x:
            VisitIdentifier(x);
            break;
        case Statement x:
            VisitStatement(x);
            break;
        case Parameter x:
            VisitParameter(x);
            break;
        case Expression x:
            VisitExpression(x);
            break;
        case Field x:
            VisitField(x);
            break;
        case FieldName x:
            VisitFieldName(x);
            break;
        case ElseClause x:
            VisitElseClause(x);
            break;
        case StringPart x:
            VisitStringPart(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitBlock(Block node)
    {
        Visit(node.Statements);
        if (node.TrailingExpression is not null) Visit(node.TrailingExpression);
    }

    protected virtual void VisitRoot(Root node)
    {
        Visit(node.Block);
    }

    protected virtual void VisitIdentifier(Identifier node) {}

    protected virtual void VisitStatement(Statement node)
    {
        switch (node)
        {
        case Declaration x:
            VisitDeclaration(x);
            break;
        case AssignmentStatement x:
            VisitAssignmentStatement(x);
            break;
        case ExpressionStatement x:
            VisitExpressionStatement(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitParameter(Parameter node)
    {
        Visit(node.Identifier);
    }

    protected virtual void VisitDeclaration(Declaration node)
    {
        switch (node)
        {
        case FunctionDeclaration x:
            VisitFunctionDeclaration(x);
            break;
        case LetDeclaration x:
            VisitLetDeclaration(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitFunctionDeclaration(FunctionDeclaration node)
    {
        Visit(node.Identifier);
        Visit(node.Parameters);
        if (node.ExpressionBody is not null) Visit(node.ExpressionBody);
        if (node.BlockBody is not null) Visit(node.BlockBody);
    }

    protected virtual void VisitLetDeclaration(LetDeclaration node)
    {
        Visit(node.Identifier);
        Visit(node.Expression);
    }

    protected virtual void VisitAssignmentStatement(AssignmentStatement node)
    {
        Visit(node.Target);
        Visit(node.Value);
    }

    protected virtual void VisitExpressionStatement(ExpressionStatement node)
    {
        Visit(node.Expression);
    }

    protected virtual void VisitExpression(Expression node)
    {
        switch (node)
        {
        case ErrorExpression x:
            VisitErrorExpression(x);
            break;
        case BlockExpression x:
            VisitBlockExpression(x);
            break;
        case CallExpression x:
            VisitCallExpression(x);
            break;
        case LambdaExpression x:
            VisitLambdaExpression(x);
            break;
        case TupleExpression x:
            VisitTupleExpression(x);
            break;
        case ObjectExpression x:
            VisitObjectExpression(x);
            break;
        case IfExpression x:
            VisitIfExpression(x);
            break;
        case LoopExpression x:
            VisitLoopExpression(x);
            break;
        case ReturnExpression x:
            VisitReturnExpression(x);
            break;
        case BreakExpression x:
            VisitBreakExpression(x);
            break;
        case ContinueExpression x:
            VisitContinueExpression(x);
            break;
        case UnaryExpression x:
            VisitUnaryExpression(x);
            break;
        case BinaryExpression x:
            VisitBinaryExpression(x);
            break;
        case AccessExpression x:
            VisitAccessExpression(x);
            break;
        case IdentifierExpression x:
            VisitIdentifierExpression(x);
            break;
        case StringExpression x:
            VisitStringExpression(x);
            break;
        case BoolExpression x:
            VisitBoolExpression(x);
            break;
        case NumberExpression x:
            VisitNumberExpression(x);
            break;
        case NilExpression x:
            VisitNilExpression(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitErrorExpression(ErrorExpression node) {}

    protected virtual void VisitBlockExpression(BlockExpression node)
    {
        Visit(node.Block);
    }

    protected virtual void VisitCallExpression(CallExpression node)
    {
        Visit(node.Target);
        Visit(node.Arguments);
    }

    protected virtual void VisitLambdaExpression(LambdaExpression node)
    {
        Visit(node.Parameters);
        Visit(node.Body);
    }

    protected virtual void VisitTupleExpression(TupleExpression node)
    {
        Visit(node.Expressions);
    }

    protected virtual void VisitObjectExpression(ObjectExpression node)
    {
        Visit(node.Fields);
    }

    protected virtual void VisitField(Field node)
    {
        if (node.Name is not null) Visit(node.Name);
        Visit(node.Value);
    }

    protected virtual void VisitFieldName(FieldName node)
    {
        switch (node)
        {
        case SimpleFieldName x:
            VisitSimpleFieldName(x);
            break;
        case StringFieldName x:
            VisitStringFieldName(x);
            break;
        case ExpressionFieldName x:
            VisitExpressionFieldName(x);
            break;
        case ErrorFieldName x:
            VisitErrorFieldName(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitSimpleFieldName(SimpleFieldName node) {}

    protected virtual void VisitStringFieldName(StringFieldName node)
    {
        Visit(node.String);
    }

    protected virtual void VisitExpressionFieldName(ExpressionFieldName node)
    {
        Visit(node.Expression);
    }

    protected virtual void VisitErrorFieldName(ErrorFieldName node) {}

    protected virtual void VisitIfExpression(IfExpression node)
    {
        Visit(node.Condition);
        Visit(node.IfTrue);
        if (node.Else is not null) Visit(node.Else);
    }

    protected virtual void VisitElseClause(ElseClause node)
    {
        Visit(node.IfFalse);
    }

    protected virtual void VisitLoopExpression(LoopExpression node)
    {
        Visit(node.Block);
    }

    protected virtual void VisitReturnExpression(ReturnExpression node)
    {
        if (node.Expression is not null) Visit(node.Expression);
    }

    protected virtual void VisitBreakExpression(BreakExpression node)
    {
        if (node.Expression is not null) Visit(node.Expression);
    }

    protected virtual void VisitContinueExpression(ContinueExpression node) {}

    protected virtual void VisitUnaryExpression(UnaryExpression node)
    {
        Visit(node.Operand);
    }

    protected virtual void VisitBinaryExpression(BinaryExpression node)
    {
        Visit(node.Left);
        Visit(node.Right);
    }

    protected virtual void VisitAccessExpression(AccessExpression node)
    {
        Visit(node.Target);
        Visit(node.Name);
    }

    protected virtual void VisitIdentifierExpression(IdentifierExpression node) {}

    protected virtual void VisitStringExpression(StringExpression node)
    {
        Visit(node.Parts);
    }

    protected virtual void VisitStringPart(StringPart node)
    {
        switch (node)
        {
        case TextStringPart x:
            VisitTextStringPart(x);
            break;
        case InterpolationStringPart x:
            VisitInterpolationStringPart(x);
            break;
        default:
            throw new UnreachableException();
        }
    }

    protected virtual void VisitTextStringPart(TextStringPart node) {}

    protected virtual void VisitInterpolationStringPart(InterpolationStringPart node)
    {
        Visit(node.Expression);
    }

    protected virtual void VisitBoolExpression(BoolExpression node) {}

    protected virtual void VisitNumberExpression(NumberExpression node) {}

    protected virtual void VisitNilExpression(NilExpression node) {}
}
